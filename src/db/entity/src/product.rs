//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "product")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub price: Decimal,
    pub article: String,
    pub description: String,
    pub photo: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::category_product::Entity")]
    CategoryProduct,
    #[sea_orm(has_many = "super::field_product::Entity")]
    FieldProduct,
    #[sea_orm(
        belongs_to = "super::file::Entity",
        from = "Column::Photo",
        to = "super::file::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    File,
    #[sea_orm(has_many = "super::products_in_order::Entity")]
    ProductsInOrder,
}

impl Related<super::category_product::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CategoryProduct.def()
    }
}

impl Related<super::field_product::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FieldProduct.def()
    }
}

impl Related<super::file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::File.def()
    }
}

impl Related<super::products_in_order::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductsInOrder.def()
    }
}

impl Related<super::category::Entity> for Entity {
    fn to() -> RelationDef {
        super::category_product::Relation::Category.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::category_product::Relation::Product.def().rev())
    }
}

impl Related<super::field::Entity> for Entity {
    fn to() -> RelationDef {
        super::field_product::Relation::Field.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::field_product::Relation::Product.def().rev())
    }
}

impl Related<super::order::Entity> for Entity {
    fn to() -> RelationDef {
        super::products_in_order::Relation::Order.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::products_in_order::Relation::Product.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
